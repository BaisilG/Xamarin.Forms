variables:
- name: DefaultBuildConfiguration
  value: Debug
- name: DefaultBuildPlatform
  value: 'any cpu'
- name: ApkName
  value: AndroidControlGallery.AndroidControlGallery.apk
- name: IpaName
  value: XamarinFormsControlGalleryiOS.ipa
- name: SolutionFile
  value: Xamarin.Forms.sln
- name: BuildVersion
  value: $[counter('nuget-counter', 126)]
- name: BuildVersion42
  value: $[counter('xf-nuget-counter', 992000)]
- name: BuildVersion43
  value: $[counter('xf-nuget-counter', 992000)]
- name: BuildVersion44
  value: $[counter('xf-nuget-counter', 992000)]
- name: NUGET_VERSION
  value: 5.4.0
- name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
  value: true
- name: DOTNET_VERSION
  value: 3.1.100

resources:
  repositories:
    - repository: xamarin-templates
      type: github
      name: xamarin/yaml-templates
      endpoint: xamarin

trigger:
  branches:
    include:
    - master
    - 3.*
    - 4.*
  tags:
    include:
    - '*'
  paths:
    exclude:
    - README.md

pr:
  autoCancel: false
  branches:
    include:
    - master
    - 4.*
    - 3.*

schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - master

stages:
  - stage: windows
    displayName: Build Windows
    jobs:
      - job: win_hosted
        condition: eq(variables['vs2019VmPool'], 'Azure Pipelines')
        workspace:
          clean: all
        displayName: Build Windows Phase
        timeoutInMinutes: 120
        pool:
          name: $(vs2019VmPool)
          vmImage: $(vs2019VmImage)
          demands: 
            msbuild
        strategy:
          matrix:
            debug:
              BuildConfiguration:  'Debug'
            release:
              BuildConfiguration:  'Release'
        steps:
          - template: build/steps/build-windows.yml
            parameters:
              provisionatorPath : 'build/provisioning/provisioning.csx'
      - job: nuget_pack_hosted
        workspace:
          clean: all
        displayName: Nuget Phase
        dependsOn:
        - win_hosted
        condition: succeeded()
        pool:
          name: $(vs2019VmPool)
          vmImage: $(vs2019VmImage)
          demands: 
            msbuild
        variables:
          FormsIdAppend: ''
          buildConfiguration: $(DefaultBuildConfiguration)
          nugetPackageVersion : $[ dependencies.win.outputs['debug.winbuild.xamarinformspackageversion'] ]
        steps:
          - template: build/steps/build-nuget.yml

      - job: win_bots
        condition: ne(variables['vs2019VmPool'], 'Azure Pipelines')
        workspace:
          clean: all
        displayName: Build Windows Phase Bots
        timeoutInMinutes: 120
        pool:
          name: $(vs2019VmPool)
          vmImage: $(vs2019VmImage)
          demands: 
            - Agent.OS -equals Windows_NT
            - msbuild
        strategy:
          matrix:
            debug:
              BuildConfiguration:  'Debug'
            release:
              BuildConfiguration:  'Release'
        steps:
          - template: build/steps/build-windows.yml
            parameters:
              provisionatorPath : 'build/provisioning/provisioning.csx'

      - job: nuget_pack_bots
        workspace:
          clean: all
        displayName: Nuget Phase
        dependsOn:
        - win_bots
        condition: succeeded()
        pool:
          name: $(vs2019VmPool)
          vmImage: $(vs2019VmImage)
          demands: 
            msbuild
        variables:
          FormsIdAppend: ''
          buildConfiguration: $(DefaultBuildConfiguration)
          nugetPackageVersion : $[ dependencies.win.outputs['debug.winbuild.xamarinformspackageversion'] ]
        steps:
          - template: build/steps/build-nuget.yml

  - stage: android
    displayName: Build Android
    jobs:
    - job: android_legacy
      steps:
        - template: build/steps/build-android.yml
          parameters:
            name: android_legacy
            displayName: Build Android [Legacy Renderers]
            vmImage: $(macOSXVmImage)
            targetFolder: Xamarin.Forms.ControlGallery.Android/legacyRenderers/
            androidProjectArguments: '/t:"Rebuild;SignAndroidPackage" /p:ANDROID_RENDERERS="LEGACY" /bl:$(Build.ArtifactStagingDirectory)/android-legacy.binlog'
            buildConfiguration: $(AndroidBuildConfiguration)
            provisionatorPath : 'build/provisioning/provisioning.csx'
    - job: android_preappcompact
      steps:
        - template: build/steps/build-android.yml
          parameters:
            name: android_preappcompact
            displayName: Build Android [Pre-AppCompat]
            vmImage: $(macOSXVmImage)
            targetFolder: Xamarin.Forms.ControlGallery.Android/preAppCompat
            androidProjectArguments: '/t:"Rebuild;SignAndroidPackage" /p:ANDROID_RENDERERS="PREAPPCOMPAT" /bl:$(Build.ArtifactStagingDirectory)/android-preappcompact.binlog'
            buildConfiguration: $(AndroidBuildConfiguration)
            provisionatorPath : 'build/provisioning/provisioning.csx'
    - job: android_fast
      steps:
        - template: build/steps/build-android.yml
          parameters:
            name: android_fast
            displayName: Build Android [Fast Renderers]
            vmImage: $(macOSXVmImage)
            targetFolder: Xamarin.Forms.ControlGallery.Android/newRenderers/
            androidProjectArguments: '/t:"Rebuild;SignAndroidPackage" /p:ANDROID_RENDERERS="FAST" /bl:$(Build.ArtifactStagingDirectory)/android-newrenderers.binlog'
            buildConfiguration: $(AndroidBuildConfiguration)
            provisionatorPath : 'build/provisioning/provisioning.csx'


  - stage: build_osx
    displayName: Build OSX
    jobs:
    - job: osx
      steps:
        - template: build/steps/build-osx.yml
          parameters:
            vmPool: $(osx2019VmPool)
            vmImage: $(macOSXVmImage)
            name: osx
            buildForVS2017: 'false'
            displayName: 'OSX Phase'


  - stage: build_osx_2017
    displayName: Build OSX 2017
    jobs:
    - job: osx
      steps:
        - template: build/steps/build-osx.yml
          parameters:
            vmPool: $(osx2017VmPool)
            vmImage: 'macOS-10.14'
            name: osx_2017
            buildForVS2017: 'true'
            displayName: 'OSX Phase 2017'

  # only sign using the private server
  - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:
    - stage: nuget_signing
      dependsOn: windows
      displayName: Sign Nuget
      jobs:
      - job: nuget_sign
        displayName: Sign Phase
        dependsOn: nuget_pack
        pool:
          name: $(signVmPool)
          demands: 
            msbuild
        steps:
          - template: build/steps/build-sign.yml
        condition: and(succeeded(), or(eq(variables['Sign'], 'true'), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'],'refs/tags/'))))

